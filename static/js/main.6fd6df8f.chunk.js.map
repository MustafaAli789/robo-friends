{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasErorr","error","info","this","setState","React","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6SAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACE,4BAAKF,GACL,2BAAIC,MCcGK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCEhBW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKX,UAAU,OACb,2BACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCHI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCoBEC,E,YAtBX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAO,CACRC,UAAU,GAHA,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SAEN,8CAGGG,KAAKX,MAAMK,a,GAlBHQ,IAAMC,WC2BlBC,G,kBA1BX,aAAc,IAAD,8BACT,+CAaJC,YAAY,WACR,EAAKJ,UAAS,SAAAL,GACV,MAAO,CAACU,MAAOV,EAAMU,MAAM,OAd/B,EAAKV,MAAM,CACPU,MAAO,GAHF,E,mFAOSC,EAAWC,GAC7B,OAAIR,KAAKJ,MAAMU,QAASE,EAAUF,Q,+BAYlC,OACA,4BAAQG,MAAOT,KAAKX,MAAMoB,MAAOC,QAASV,KAAKK,aAA/C,UAAoEL,KAAKJ,MAAMU,W,GAtB3DJ,IAAMC,YCgBnBQ,E,8LAdWJ,EAAWC,GAC7B,OAAO,I,+BAIP,OACI,6BACI,kBAAC,EAAD,CAAeC,MAAO,QACtB,wBAAIpC,UAAU,MAAd,oB,GATK6B,IAAMC,WCwBrBS,E,4LAGFZ,KAAKX,MAAMwB,oB,+BAGH,IAAD,EAC2Db,KAAKX,MAA/DyB,EADD,EACCA,YAAaC,EADd,EACcA,eAAgBtC,EAD9B,EAC8BA,OAAQuC,EADtC,EACsCA,UACvCC,GAFC,EACiDnB,MACjCrB,EAAOyC,QAAO,SAAAC,GACnC,OAAOA,EAAMjD,KAAKkD,cAAcC,SAASP,EAAYM,mBAEvD,OAAOJ,EACL,uCAEE,yBAAK3C,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWW,aAAc+B,IACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUtC,OAAQwC,W,GAnBdd,aA2BHmB,eA3CS,SAAA1B,GACtB,MAAO,CACLkB,YAAalB,EAAM2B,aAAaT,YAChCrC,OAAQmB,EAAM4B,cAAc/C,OAC5BuC,UAAWpB,EAAM4B,cAAcR,UAC/BlB,MAAOF,EAAM4B,cAAc1B,UAIJ,SAAA2B,GACzB,MAAO,CACLV,eAAgB,SAACW,GAAD,OAAWD,ECnBpB,CACHxC,KCJ2B,sBDK3B0C,QDiB+CD,EAAME,OAAOC,SAChEhB,gBAAiB,kBAAMY,GCdQ,SAACA,GAChCA,EAAS,CAAExC,KCTuB,2BDUlC6C,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAExC,KCXO,yBDWuB0C,QAASO,OAC/DC,OAAM,SAAAC,GAAG,OAAIX,EAAS,CAAExC,KCXM,wBDWuB0C,QAASS,cDwCtDd,CAA6CV,GG5CtDyB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTb,MAAK,SAAAiB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtD,QACfiD,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBpB,OAAM,SAAArC,GACLwD,QAAQxD,MAAM,4CAA6CA,M,kBCpE3D0D,EAAqB,CAAE1C,YAAa,IAWpC2C,EAAqB,CACvBzC,WAAW,EACXvC,OAAQ,GACRqB,MAAO,ICJL4D,EAASC,yBACTC,EAAcC,YAAgB,CAACtC,aDTV,WAA0C,IAAzC3B,EAAwC,uDAAlC4D,EAAoBM,EAAc,uDAAP,GACzD,OAAOA,EAAO7E,MACV,IFN2B,sBEOvB,OAAO,eAAIW,EAAX,CAAkBkB,YAAagD,EAAOnC,UAC1C,QACI,OAAO/B,ICIgC4B,cDMtB,WAA0C,IAAzC5B,EAAwC,uDAAlC6D,EAAoBK,EAAc,uDAAP,GAC3D,OAAOA,EAAO7E,MACV,IFpB8B,yBEqB1B,OAAO8E,OAAOC,OAAO,GAAIpE,EAAO,CAAEoB,WAAW,IACjD,IFrB8B,yBEsB1B,OAAO+C,OAAOC,OAAO,GAAIpE,EAAO,CAAEnB,OAAQqF,EAAOnC,QAASX,WAAW,IACzE,IFtB6B,wBEuBzB,OAAO+C,OAAOC,OAAO,GAAIpE,EAAO,CAAEE,MAAOgE,EAAOnC,QAASX,WAAW,IACxE,QACI,OAAOpB,MCdbqE,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAExEW,IAASC,OAAO,kBAAC,IAAD,CAAUL,MAAOA,GACzB,kBAAC,EAAD,OACSM,SAASC,eAAe,SFE1B,WACb,GAA6C,kBAAmB3B,UAAW,CAGzE,GADkB,IAAI4B,IAAIC,gBAAwBnC,OAAOC,UAC3CmC,SAAWpC,OAAOC,SAASmC,OAIvC,OAGFpC,OAAOqC,iBAAiB,QAAQ,WAC9B,IAAMhC,EAAK,UAAM8B,gBAAN,sBAEPrC,EAwCV,SAAiCO,GAE/Bd,MAAMc,GACHb,MAAK,SAAAC,GAGkB,MAApBA,EAAS6C,SACuD,IAAhE7C,EAAS8C,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CnC,UAAUC,cAAcmC,MAAMlD,MAAK,SAAAiB,GACjCA,EAAakC,aAAanD,MAAK,WAC7BQ,OAAOC,SAAS2C,eAKpBxC,EAAgBC,MAGnBT,OAAM,WACLmB,QAAQC,IACN,oEA5DA6B,CAAwBxC,GAGxBD,EAAgBC,OEpBxByC,K","file":"static/js/main.6fd6df8f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state= {\r\n            hasErorr: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasErorr: true })\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasErorr){\r\n            return(\r\n                <h1>Error occured!</h1>\r\n            )\r\n        } else {\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry","import React from 'react';\r\n\r\nclass CounterButton extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        if (this.state.count!== nextState.count){\r\n            return true\r\n        }\r\n        return false\r\n        \r\n    }\r\n    updateCount=()=>{\r\n        this.setState(state=>{\r\n            return {count: state.count+1}\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n        <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends React.Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false\r\n    }\r\n\r\n    render (){\r\n        return (\r\n            <div>\r\n                <CounterButton color={'red'} />\r\n                <h1 className=\"f1\">Robofriends</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux' \r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';  \r\nimport Header from '../components/Header';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending, error } = this.props;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return isPending ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <Header/>\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants\"\r\n\r\nconst initialStateSearch = { searchField: '' }\r\n\r\nexport const searchRobots= (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state\r\n    }\r\n} ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux'; \r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(<Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}